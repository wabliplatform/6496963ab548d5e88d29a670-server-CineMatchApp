openapi: 3.0.1
info:
  contact:
    email: lampralexandros@gmail.com
  description: This is a sample openApi document
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://wabli.netlify.app/
  title: TempApi
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- description: okthess-community-6011
  url: https://83.212.100.226:6011/v1
security:
- {}
tags:
- description: not yet ready
  name: users
- description: not yet ready
  name: movies
- description: not yet ready
  name: allmovies
- description: not yet ready
  name: shibaimages
paths:
  /users:
    post:
      operationId: createusers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
        description: data to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
          description: successful operation
      summary: Creates the data
      tags:
      - users
      x-eov-operation-handler: controllers/UsersController
  /users/{usersId}:
    delete:
      operationId: deleteusers
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: usersId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      summary: Delete the element
      tags:
      - users
      x-eov-operation-handler: controllers/UsersController
    get:
      operationId: getusers
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: usersId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
          description: successful operation
      summary: Get the element
      tags:
      - users
      x-eov-operation-handler: controllers/UsersController
    put:
      operationId: updateusers
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: usersId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
        description: data to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
          description: successful operation
      summary: Updates the element
      tags:
      - users
      x-eov-operation-handler: controllers/UsersController
  /users/getAll:
    get:
      operationId: getAllusers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/users'
                type: array
          description: successful operation
      summary: Get all the data
      tags:
      - users
      x-method-getAll: "true"
      x-eov-operation-handler: controllers/UsersController
  /users/getByParams:
    get:
      operationId: getByParamsusers
      parameters:
      - description: the query based on which the search is performed
        explode: true
        in: query
        name: filter
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/users'
                type: array
          description: successful operation
      summary: Get all the data based on user query
      tags:
      - users
      x-method-get-by-params: "true"
      x-eov-operation-handler: controllers/UsersController
  /movies:
    post:
      operationId: createmovies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movies'
        description: data to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movies'
          description: successful operation
      summary: Creates the data
      tags:
      - movies
      x-eov-operation-handler: controllers/MoviesController
  /movies/{moviesId}:
    delete:
      operationId: deletemovies
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: moviesId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      summary: Delete the element
      tags:
      - movies
      x-eov-operation-handler: controllers/MoviesController
    get:
      operationId: getmovies
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: moviesId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movies'
          description: successful operation
      summary: Get the element
      tags:
      - movies
      x-eov-operation-handler: controllers/MoviesController
    put:
      operationId: updatemovies
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: moviesId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movies'
        description: data to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movies'
          description: successful operation
      summary: Updates the element
      tags:
      - movies
      x-eov-operation-handler: controllers/MoviesController
  /movies/getAll:
    get:
      operationId: getAllmovies
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/movies'
                type: array
          description: successful operation
      summary: Get all the data
      tags:
      - movies
      x-method-getAll: "true"
      x-eov-operation-handler: controllers/MoviesController
  /movies/getByParams:
    get:
      operationId: getByParamsmovies
      parameters:
      - description: the query based on which the search is performed
        explode: true
        in: query
        name: filter
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/movies'
                type: array
          description: successful operation
      summary: Get all the data based on user query
      tags:
      - movies
      x-method-get-by-params: "true"
      x-eov-operation-handler: controllers/MoviesController
  /allmovies:
    post:
      operationId: createallmovies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/allmovies'
        description: data to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/allmovies'
          description: successful operation
      summary: Creates the data
      tags:
      - allmovies
      x-eov-operation-handler: controllers/AllmoviesController
  /allmovies/{allmoviesId}:
    delete:
      operationId: deleteallmovies
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: allmoviesId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      summary: Delete the element
      tags:
      - allmovies
      x-eov-operation-handler: controllers/AllmoviesController
    get:
      operationId: getallmovies
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: allmoviesId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/allmovies'
          description: successful operation
      summary: Get the element
      tags:
      - allmovies
      x-eov-operation-handler: controllers/AllmoviesController
    put:
      operationId: updateallmovies
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: allmoviesId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/allmovies'
        description: data to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/allmovies'
          description: successful operation
      summary: Updates the element
      tags:
      - allmovies
      x-eov-operation-handler: controllers/AllmoviesController
  /allmovies/getAll:
    get:
      operationId: getAllallmovies
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/allmovies'
                type: array
          description: successful operation
      summary: Get all the data
      tags:
      - allmovies
      x-method-getAll: "true"
      x-eov-operation-handler: controllers/AllmoviesController
  /allmovies/getByParams:
    get:
      operationId: getByParamsallmovies
      parameters:
      - description: the query based on which the search is performed
        explode: true
        in: query
        name: filter
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/allmovies'
                type: array
          description: successful operation
      summary: Get all the data based on user query
      tags:
      - allmovies
      x-method-get-by-params: "true"
      x-eov-operation-handler: controllers/AllmoviesController
  /shibaimages:
    post:
      operationId: createshibaimages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shibaimages'
        description: data to be created
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shibaimages'
          description: successful operation
      summary: Creates the data
      tags:
      - shibaimages
      x-eov-operation-handler: controllers/ShibaimagesController
  /shibaimages/{shibaimagesId}:
    delete:
      operationId: deleteshibaimages
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: shibaimagesId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: successful operation
      summary: Delete the element
      tags:
      - shibaimages
      x-eov-operation-handler: controllers/ShibaimagesController
    get:
      operationId: getshibaimages
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: shibaimagesId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shibaimages'
          description: successful operation
      summary: Get the element
      tags:
      - shibaimages
      x-eov-operation-handler: controllers/ShibaimagesController
    put:
      operationId: updateshibaimages
      parameters:
      - description: the Id parameter
        explode: false
        in: path
        name: shibaimagesId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/shibaimages'
        description: data to be updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shibaimages'
          description: successful operation
      summary: Updates the element
      tags:
      - shibaimages
      x-eov-operation-handler: controllers/ShibaimagesController
  /shibaimages/getAll:
    get:
      operationId: getAllshibaimages
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/shibaimages'
                type: array
          description: successful operation
      summary: Get all the data
      tags:
      - shibaimages
      x-method-getAll: "true"
      x-eov-operation-handler: controllers/ShibaimagesController
  /shibaimages/getByParams:
    get:
      operationId: getByParamsshibaimages
      parameters:
      - description: the query based on which the search is performed
        explode: true
        in: query
        name: filter
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/shibaimages'
                type: array
          description: successful operation
      summary: Get all the data based on user query
      tags:
      - shibaimages
      x-method-get-by-params: "true"
      x-eov-operation-handler: controllers/ShibaimagesController
components:
  schemas:
    users:
      example:
        _id: _id
        user: user
      properties:
        _id:
          type: string
        user:
          type: string
      required:
      - user
      type: object
    movies:
      example:
        _id: _id
      properties:
        _id:
          type: string
      type: object
    allmovies:
      example:
        _id: _id
      properties:
        _id:
          type: string
      type: object
    shibaimages:
      example:
        _id: _id
      properties:
        _id:
          type: string
      type: object
